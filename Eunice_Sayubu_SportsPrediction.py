{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96a476b4-8485-491c-b258-eb3b98d7df12",
   "metadata": {},
   "outputs": [],
   "source": [
    "from google.colab import drive\n",
    "drive.mount('/content/drive')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "4b7cec5d-e473-4c17-b588-afc62e632ebf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "7f17a1f5-60c1-4d0e-959a-7480849e7c0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "legacy_url = \"C:\\\\Users\\\\user\\\\Downloads\\\\male_players (legacy).csv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "238036d8-a0be-43e8-93dc-6e6f9c81cc3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_train = pd.read_csv(legacy_url, low_memory=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "fb5ca08c-dfc3-4118-870f-3e18012f631d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 161583 entries, 0 to 161582\n",
      "Columns: 110 entries, player_id to player_face_url\n",
      "dtypes: float64(18), int64(45), object(47)\n",
      "memory usage: 135.6+ MB\n"
     ]
    }
   ],
   "source": [
    "df_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "039b1505-27b7-4252-9709-ab9939dbda6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['player_id', 'player_url', 'fifa_version', 'fifa_update',\n",
       "       'fifa_update_date', 'short_name', 'long_name', 'player_positions',\n",
       "       'overall', 'potential',\n",
       "       ...\n",
       "       'cdm', 'rdm', 'rwb', 'lb', 'lcb', 'cb', 'rcb', 'rb', 'gk',\n",
       "       'player_face_url'],\n",
       "      dtype='object', length=110)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "8b2f5efc-adda-4b5c-8083-cd1537c79e30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         93\n",
       "1         92\n",
       "2         90\n",
       "3         90\n",
       "4         90\n",
       "          ..\n",
       "161578    46\n",
       "161579    46\n",
       "161580    46\n",
       "161581    46\n",
       "161582    46\n",
       "Name: overall, Length: 161583, dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check if our independent variable is there are missing values\n",
    "df_train['overall']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "303d5c51-e0b3-41fc-9e32-46d5f75a08f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player_id</th>\n",
       "      <th>player_url</th>\n",
       "      <th>fifa_version</th>\n",
       "      <th>fifa_update</th>\n",
       "      <th>fifa_update_date</th>\n",
       "      <th>short_name</th>\n",
       "      <th>long_name</th>\n",
       "      <th>player_positions</th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>...</th>\n",
       "      <th>cdm</th>\n",
       "      <th>rdm</th>\n",
       "      <th>rwb</th>\n",
       "      <th>lb</th>\n",
       "      <th>lcb</th>\n",
       "      <th>cb</th>\n",
       "      <th>rcb</th>\n",
       "      <th>rb</th>\n",
       "      <th>gk</th>\n",
       "      <th>player_face_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>158023</td>\n",
       "      <td>/player/158023/lionel-messi/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>L. Messi</td>\n",
       "      <td>Lionel Andrés Messi Cuccittini</td>\n",
       "      <td>CF</td>\n",
       "      <td>93</td>\n",
       "      <td>95</td>\n",
       "      <td>...</td>\n",
       "      <td>62+3</td>\n",
       "      <td>62+3</td>\n",
       "      <td>62+3</td>\n",
       "      <td>54+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>54+3</td>\n",
       "      <td>15+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/158/023/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20801</td>\n",
       "      <td>/player/20801/c-ronaldo-dos-santos-aveiro/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>Cristiano Ronaldo</td>\n",
       "      <td>Cristiano Ronaldo dos Santos Aveiro</td>\n",
       "      <td>LW, LM</td>\n",
       "      <td>92</td>\n",
       "      <td>92</td>\n",
       "      <td>...</td>\n",
       "      <td>63+3</td>\n",
       "      <td>63+3</td>\n",
       "      <td>63+3</td>\n",
       "      <td>57+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>57+3</td>\n",
       "      <td>16+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/020/801/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9014</td>\n",
       "      <td>/player/9014/arjen-robben/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>A. Robben</td>\n",
       "      <td>Arjen Robben</td>\n",
       "      <td>RM, LM, RW</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>...</td>\n",
       "      <td>64+3</td>\n",
       "      <td>64+3</td>\n",
       "      <td>64+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>14+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/009/014/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>41236</td>\n",
       "      <td>/player/41236/zlatan-ibrahimovic/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>Z. Ibrahimović</td>\n",
       "      <td>Zlatan Ibrahimović</td>\n",
       "      <td>ST</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>...</td>\n",
       "      <td>65+3</td>\n",
       "      <td>65+3</td>\n",
       "      <td>61+3</td>\n",
       "      <td>56+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>56+3</td>\n",
       "      <td>17+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/041/236/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>167495</td>\n",
       "      <td>/player/167495/manuel-neuer/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>M. Neuer</td>\n",
       "      <td>Manuel Peter Neuer</td>\n",
       "      <td>GK</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>...</td>\n",
       "      <td>40+3</td>\n",
       "      <td>40+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>87+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/167/495/15_120.png</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 110 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   player_id                                        player_url  fifa_version  \\\n",
       "0     158023                /player/158023/lionel-messi/150002            15   \n",
       "1      20801  /player/20801/c-ronaldo-dos-santos-aveiro/150002            15   \n",
       "2       9014                  /player/9014/arjen-robben/150002            15   \n",
       "3      41236           /player/41236/zlatan-ibrahimovic/150002            15   \n",
       "4     167495                /player/167495/manuel-neuer/150002            15   \n",
       "\n",
       "   fifa_update fifa_update_date         short_name  \\\n",
       "0            2       2014-09-18           L. Messi   \n",
       "1            2       2014-09-18  Cristiano Ronaldo   \n",
       "2            2       2014-09-18          A. Robben   \n",
       "3            2       2014-09-18     Z. Ibrahimović   \n",
       "4            2       2014-09-18           M. Neuer   \n",
       "\n",
       "                             long_name player_positions  overall  potential  \\\n",
       "0       Lionel Andrés Messi Cuccittini               CF       93         95   \n",
       "1  Cristiano Ronaldo dos Santos Aveiro           LW, LM       92         92   \n",
       "2                         Arjen Robben       RM, LM, RW       90         90   \n",
       "3                   Zlatan Ibrahimović               ST       90         90   \n",
       "4                   Manuel Peter Neuer               GK       90         90   \n",
       "\n",
       "   ...   cdm   rdm   rwb    lb   lcb    cb   rcb    rb    gk  \\\n",
       "0  ...  62+3  62+3  62+3  54+3  45+3  45+3  45+3  54+3  15+3   \n",
       "1  ...  63+3  63+3  63+3  57+3  52+3  52+3  52+3  57+3  16+3   \n",
       "2  ...  64+3  64+3  64+3  55+3  46+3  46+3  46+3  55+3  14+3   \n",
       "3  ...  65+3  65+3  61+3  56+3  55+3  55+3  55+3  56+3  17+3   \n",
       "4  ...  40+3  40+3  36+3  36+3  38+3  38+3  38+3  36+3  87+3   \n",
       "\n",
       "                                     player_face_url  \n",
       "0  https://cdn.sofifa.net/players/158/023/15_120.png  \n",
       "1  https://cdn.sofifa.net/players/020/801/15_120.png  \n",
       "2  https://cdn.sofifa.net/players/009/014/15_120.png  \n",
       "3  https://cdn.sofifa.net/players/041/236/15_120.png  \n",
       "4  https://cdn.sofifa.net/players/167/495/15_120.png  \n",
       "\n",
       "[5 rows x 110 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "181c9bbc-3880-4175-8d32-1ba07c617cc9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['club_loaned_from', 'nation_team_id', 'nation_position',\n",
       "       'nation_jersey_number', 'release_clause_eur', 'player_tags',\n",
       "       'player_traits', 'goalkeeping_speed'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Finding of the percentage of missing value in each column\n",
    "Percentage = (df_train.isna().sum()/len(df_train))*100\n",
    "# Dropping of the same of the columns with >= 30% NaN\n",
    "columns_to_drop = Percentage[Percentage>=30].index\n",
    "columns_to_drop\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "e4b59b21-8c61-40cd-b5cb-bafa5d22f4a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player_id</th>\n",
       "      <th>player_url</th>\n",
       "      <th>fifa_version</th>\n",
       "      <th>fifa_update</th>\n",
       "      <th>fifa_update_date</th>\n",
       "      <th>short_name</th>\n",
       "      <th>long_name</th>\n",
       "      <th>player_positions</th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>...</th>\n",
       "      <th>cdm</th>\n",
       "      <th>rdm</th>\n",
       "      <th>rwb</th>\n",
       "      <th>lb</th>\n",
       "      <th>lcb</th>\n",
       "      <th>cb</th>\n",
       "      <th>rcb</th>\n",
       "      <th>rb</th>\n",
       "      <th>gk</th>\n",
       "      <th>player_face_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>158023</td>\n",
       "      <td>/player/158023/lionel-messi/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>L. Messi</td>\n",
       "      <td>Lionel Andrés Messi Cuccittini</td>\n",
       "      <td>CF</td>\n",
       "      <td>93</td>\n",
       "      <td>95</td>\n",
       "      <td>...</td>\n",
       "      <td>62+3</td>\n",
       "      <td>62+3</td>\n",
       "      <td>62+3</td>\n",
       "      <td>54+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>54+3</td>\n",
       "      <td>15+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/158/023/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20801</td>\n",
       "      <td>/player/20801/c-ronaldo-dos-santos-aveiro/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>Cristiano Ronaldo</td>\n",
       "      <td>Cristiano Ronaldo dos Santos Aveiro</td>\n",
       "      <td>LW, LM</td>\n",
       "      <td>92</td>\n",
       "      <td>92</td>\n",
       "      <td>...</td>\n",
       "      <td>63+3</td>\n",
       "      <td>63+3</td>\n",
       "      <td>63+3</td>\n",
       "      <td>57+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>57+3</td>\n",
       "      <td>16+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/020/801/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9014</td>\n",
       "      <td>/player/9014/arjen-robben/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>A. Robben</td>\n",
       "      <td>Arjen Robben</td>\n",
       "      <td>RM, LM, RW</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>...</td>\n",
       "      <td>64+3</td>\n",
       "      <td>64+3</td>\n",
       "      <td>64+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>14+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/009/014/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>41236</td>\n",
       "      <td>/player/41236/zlatan-ibrahimovic/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>Z. Ibrahimović</td>\n",
       "      <td>Zlatan Ibrahimović</td>\n",
       "      <td>ST</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>...</td>\n",
       "      <td>65+3</td>\n",
       "      <td>65+3</td>\n",
       "      <td>61+3</td>\n",
       "      <td>56+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>56+3</td>\n",
       "      <td>17+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/041/236/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>167495</td>\n",
       "      <td>/player/167495/manuel-neuer/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>M. Neuer</td>\n",
       "      <td>Manuel Peter Neuer</td>\n",
       "      <td>GK</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>...</td>\n",
       "      <td>40+3</td>\n",
       "      <td>40+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>87+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/167/495/15_120.png</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 102 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   player_id                                        player_url  fifa_version  \\\n",
       "0     158023                /player/158023/lionel-messi/150002            15   \n",
       "1      20801  /player/20801/c-ronaldo-dos-santos-aveiro/150002            15   \n",
       "2       9014                  /player/9014/arjen-robben/150002            15   \n",
       "3      41236           /player/41236/zlatan-ibrahimovic/150002            15   \n",
       "4     167495                /player/167495/manuel-neuer/150002            15   \n",
       "\n",
       "   fifa_update fifa_update_date         short_name  \\\n",
       "0            2       2014-09-18           L. Messi   \n",
       "1            2       2014-09-18  Cristiano Ronaldo   \n",
       "2            2       2014-09-18          A. Robben   \n",
       "3            2       2014-09-18     Z. Ibrahimović   \n",
       "4            2       2014-09-18           M. Neuer   \n",
       "\n",
       "                             long_name player_positions  overall  potential  \\\n",
       "0       Lionel Andrés Messi Cuccittini               CF       93         95   \n",
       "1  Cristiano Ronaldo dos Santos Aveiro           LW, LM       92         92   \n",
       "2                         Arjen Robben       RM, LM, RW       90         90   \n",
       "3                   Zlatan Ibrahimović               ST       90         90   \n",
       "4                   Manuel Peter Neuer               GK       90         90   \n",
       "\n",
       "   ...   cdm   rdm   rwb    lb   lcb    cb   rcb    rb    gk  \\\n",
       "0  ...  62+3  62+3  62+3  54+3  45+3  45+3  45+3  54+3  15+3   \n",
       "1  ...  63+3  63+3  63+3  57+3  52+3  52+3  52+3  57+3  16+3   \n",
       "2  ...  64+3  64+3  64+3  55+3  46+3  46+3  46+3  55+3  14+3   \n",
       "3  ...  65+3  65+3  61+3  56+3  55+3  55+3  55+3  56+3  17+3   \n",
       "4  ...  40+3  40+3  36+3  36+3  38+3  38+3  38+3  36+3  87+3   \n",
       "\n",
       "                                     player_face_url  \n",
       "0  https://cdn.sofifa.net/players/158/023/15_120.png  \n",
       "1  https://cdn.sofifa.net/players/020/801/15_120.png  \n",
       "2  https://cdn.sofifa.net/players/009/014/15_120.png  \n",
       "3  https://cdn.sofifa.net/players/041/236/15_120.png  \n",
       "4  https://cdn.sofifa.net/players/167/495/15_120.png  \n",
       "\n",
       "[5 rows x 102 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#New dataframe with colums dropped \n",
    "df_cleaned = df_train.drop(columns = columns_to_drop, axis = 1)\n",
    "df_cleaned.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "574a5b97-fa9b-47db-9e83-88680634a8f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player_id</th>\n",
       "      <th>fifa_version</th>\n",
       "      <th>fifa_update</th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>value_eur</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>age</th>\n",
       "      <th>height_cm</th>\n",
       "      <th>weight_kg</th>\n",
       "      <th>...</th>\n",
       "      <th>mentality_penalties</th>\n",
       "      <th>mentality_composure</th>\n",
       "      <th>defending_marking_awareness</th>\n",
       "      <th>defending_standing_tackle</th>\n",
       "      <th>defending_sliding_tackle</th>\n",
       "      <th>goalkeeping_diving</th>\n",
       "      <th>goalkeeping_handling</th>\n",
       "      <th>goalkeeping_kicking</th>\n",
       "      <th>goalkeeping_positioning</th>\n",
       "      <th>goalkeeping_reflexes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>158023</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>93</td>\n",
       "      <td>95</td>\n",
       "      <td>100500000.0</td>\n",
       "      <td>550000.0</td>\n",
       "      <td>27</td>\n",
       "      <td>169</td>\n",
       "      <td>67</td>\n",
       "      <td>...</td>\n",
       "      <td>76</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25</td>\n",
       "      <td>21</td>\n",
       "      <td>20</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20801</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>92</td>\n",
       "      <td>92</td>\n",
       "      <td>79000000.0</td>\n",
       "      <td>375000.0</td>\n",
       "      <td>29</td>\n",
       "      <td>185</td>\n",
       "      <td>80</td>\n",
       "      <td>...</td>\n",
       "      <td>85</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22</td>\n",
       "      <td>31</td>\n",
       "      <td>23</td>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9014</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>54500000.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>30</td>\n",
       "      <td>180</td>\n",
       "      <td>80</td>\n",
       "      <td>...</td>\n",
       "      <td>80</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>11</td>\n",
       "      <td>5</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>41236</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>52500000.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>32</td>\n",
       "      <td>195</td>\n",
       "      <td>95</td>\n",
       "      <td>...</td>\n",
       "      <td>91</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25</td>\n",
       "      <td>41</td>\n",
       "      <td>27</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>167495</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>63500000.0</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>28</td>\n",
       "      <td>193</td>\n",
       "      <td>92</td>\n",
       "      <td>...</td>\n",
       "      <td>37</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>87</td>\n",
       "      <td>85</td>\n",
       "      <td>92</td>\n",
       "      <td>90</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161578</th>\n",
       "      <td>269011</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>46</td>\n",
       "      <td>61</td>\n",
       "      <td>110000.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>18</td>\n",
       "      <td>180</td>\n",
       "      <td>73</td>\n",
       "      <td>...</td>\n",
       "      <td>54</td>\n",
       "      <td>40.0</td>\n",
       "      <td>23</td>\n",
       "      <td>21</td>\n",
       "      <td>25</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161579</th>\n",
       "      <td>269019</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>46</td>\n",
       "      <td>58</td>\n",
       "      <td>110000.0</td>\n",
       "      <td>750.0</td>\n",
       "      <td>19</td>\n",
       "      <td>188</td>\n",
       "      <td>83</td>\n",
       "      <td>...</td>\n",
       "      <td>31</td>\n",
       "      <td>35.0</td>\n",
       "      <td>50</td>\n",
       "      <td>51</td>\n",
       "      <td>45</td>\n",
       "      <td>6</td>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>13</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161580</th>\n",
       "      <td>271093</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>46</td>\n",
       "      <td>58</td>\n",
       "      <td>110000.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>19</td>\n",
       "      <td>181</td>\n",
       "      <td>73</td>\n",
       "      <td>...</td>\n",
       "      <td>37</td>\n",
       "      <td>35.0</td>\n",
       "      <td>36</td>\n",
       "      <td>45</td>\n",
       "      <td>50</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>14</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161581</th>\n",
       "      <td>271555</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>46</td>\n",
       "      <td>70</td>\n",
       "      <td>150000.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>17</td>\n",
       "      <td>175</td>\n",
       "      <td>68</td>\n",
       "      <td>...</td>\n",
       "      <td>63</td>\n",
       "      <td>43.0</td>\n",
       "      <td>19</td>\n",
       "      <td>17</td>\n",
       "      <td>14</td>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "      <td>7</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161582</th>\n",
       "      <td>271608</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>46</td>\n",
       "      <td>63</td>\n",
       "      <td>110000.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>17</td>\n",
       "      <td>180</td>\n",
       "      <td>70</td>\n",
       "      <td>...</td>\n",
       "      <td>25</td>\n",
       "      <td>30.0</td>\n",
       "      <td>50</td>\n",
       "      <td>45</td>\n",
       "      <td>42</td>\n",
       "      <td>13</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>161583 rows × 59 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        player_id  fifa_version  fifa_update  overall  potential    value_eur  \\\n",
       "0          158023            15            2       93         95  100500000.0   \n",
       "1           20801            15            2       92         92   79000000.0   \n",
       "2            9014            15            2       90         90   54500000.0   \n",
       "3           41236            15            2       90         90   52500000.0   \n",
       "4          167495            15            2       90         90   63500000.0   \n",
       "...           ...           ...          ...      ...        ...          ...   \n",
       "161578     269011            23            2       46         61     110000.0   \n",
       "161579     269019            23            2       46         58     110000.0   \n",
       "161580     271093            23            2       46         58     110000.0   \n",
       "161581     271555            23            2       46         70     150000.0   \n",
       "161582     271608            23            2       46         63     110000.0   \n",
       "\n",
       "        wage_eur  age  height_cm  weight_kg  ...  mentality_penalties  \\\n",
       "0       550000.0   27        169         67  ...                   76   \n",
       "1       375000.0   29        185         80  ...                   85   \n",
       "2       275000.0   30        180         80  ...                   80   \n",
       "3       275000.0   32        195         95  ...                   91   \n",
       "4       300000.0   28        193         92  ...                   37   \n",
       "...          ...  ...        ...        ...  ...                  ...   \n",
       "161578     700.0   18        180         73  ...                   54   \n",
       "161579     750.0   19        188         83  ...                   31   \n",
       "161580     500.0   19        181         73  ...                   37   \n",
       "161581     500.0   17        175         68  ...                   63   \n",
       "161582     500.0   17        180         70  ...                   25   \n",
       "\n",
       "        mentality_composure  defending_marking_awareness  \\\n",
       "0                       NaN                           25   \n",
       "1                       NaN                           22   \n",
       "2                       NaN                           29   \n",
       "3                       NaN                           25   \n",
       "4                       NaN                           25   \n",
       "...                     ...                          ...   \n",
       "161578                 40.0                           23   \n",
       "161579                 35.0                           50   \n",
       "161580                 35.0                           36   \n",
       "161581                 43.0                           19   \n",
       "161582                 30.0                           50   \n",
       "\n",
       "        defending_standing_tackle  defending_sliding_tackle  \\\n",
       "0                              21                        20   \n",
       "1                              31                        23   \n",
       "2                              26                        26   \n",
       "3                              41                        27   \n",
       "4                              25                        25   \n",
       "...                           ...                       ...   \n",
       "161578                         21                        25   \n",
       "161579                         51                        45   \n",
       "161580                         45                        50   \n",
       "161581                         17                        14   \n",
       "161582                         45                        42   \n",
       "\n",
       "        goalkeeping_diving  goalkeeping_handling  goalkeeping_kicking  \\\n",
       "0                        6                    11                   15   \n",
       "1                        7                    11                   15   \n",
       "2                       10                     8                   11   \n",
       "3                       13                    15                   10   \n",
       "4                       87                    85                   92   \n",
       "...                    ...                   ...                  ...   \n",
       "161578                   9                    13                   13   \n",
       "161579                   6                    14                    8   \n",
       "161580                   8                     9                    7   \n",
       "161581                  13                    12                   14   \n",
       "161582                  13                     7                    6   \n",
       "\n",
       "        goalkeeping_positioning  goalkeeping_reflexes  \n",
       "0                            14                     8  \n",
       "1                            14                    11  \n",
       "2                             5                    15  \n",
       "3                             9                    12  \n",
       "4                            90                    86  \n",
       "...                         ...                   ...  \n",
       "161578                       12                     7  \n",
       "161579                       13                    14  \n",
       "161580                       14                     9  \n",
       "161581                        7                    13  \n",
       "161582                        6                    14  \n",
       "\n",
       "[161583 rows x 59 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Separation of categorical and numerical values \n",
    "numerical_cols =df_cleaned.select_dtypes(exclude=['object'])\n",
    "numerical_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "b9789f3e-1f59-4f3c-8b2d-8ee5812e410a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player_url</th>\n",
       "      <th>fifa_update_date</th>\n",
       "      <th>short_name</th>\n",
       "      <th>long_name</th>\n",
       "      <th>player_positions</th>\n",
       "      <th>dob</th>\n",
       "      <th>league_name</th>\n",
       "      <th>club_name</th>\n",
       "      <th>club_position</th>\n",
       "      <th>club_joined_date</th>\n",
       "      <th>...</th>\n",
       "      <th>cdm</th>\n",
       "      <th>rdm</th>\n",
       "      <th>rwb</th>\n",
       "      <th>lb</th>\n",
       "      <th>lcb</th>\n",
       "      <th>cb</th>\n",
       "      <th>rcb</th>\n",
       "      <th>rb</th>\n",
       "      <th>gk</th>\n",
       "      <th>player_face_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/player/158023/lionel-messi/150002</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>L. Messi</td>\n",
       "      <td>Lionel Andrés Messi Cuccittini</td>\n",
       "      <td>CF</td>\n",
       "      <td>1987-06-24</td>\n",
       "      <td>La Liga</td>\n",
       "      <td>FC Barcelona</td>\n",
       "      <td>CF</td>\n",
       "      <td>2004-07-01</td>\n",
       "      <td>...</td>\n",
       "      <td>62+3</td>\n",
       "      <td>62+3</td>\n",
       "      <td>62+3</td>\n",
       "      <td>54+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>54+3</td>\n",
       "      <td>15+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/158/023/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/player/20801/c-ronaldo-dos-santos-aveiro/150002</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>Cristiano Ronaldo</td>\n",
       "      <td>Cristiano Ronaldo dos Santos Aveiro</td>\n",
       "      <td>LW, LM</td>\n",
       "      <td>1985-02-05</td>\n",
       "      <td>La Liga</td>\n",
       "      <td>Real Madrid CF</td>\n",
       "      <td>LW</td>\n",
       "      <td>2009-07-01</td>\n",
       "      <td>...</td>\n",
       "      <td>63+3</td>\n",
       "      <td>63+3</td>\n",
       "      <td>63+3</td>\n",
       "      <td>57+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>57+3</td>\n",
       "      <td>16+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/020/801/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/player/9014/arjen-robben/150002</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>A. Robben</td>\n",
       "      <td>Arjen Robben</td>\n",
       "      <td>RM, LM, RW</td>\n",
       "      <td>1984-01-23</td>\n",
       "      <td>Bundesliga</td>\n",
       "      <td>FC Bayern München</td>\n",
       "      <td>SUB</td>\n",
       "      <td>2009-08-28</td>\n",
       "      <td>...</td>\n",
       "      <td>64+3</td>\n",
       "      <td>64+3</td>\n",
       "      <td>64+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>14+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/009/014/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/player/41236/zlatan-ibrahimovic/150002</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>Z. Ibrahimović</td>\n",
       "      <td>Zlatan Ibrahimović</td>\n",
       "      <td>ST</td>\n",
       "      <td>1981-10-03</td>\n",
       "      <td>Ligue 1</td>\n",
       "      <td>Paris Saint-Germain</td>\n",
       "      <td>ST</td>\n",
       "      <td>2012-07-01</td>\n",
       "      <td>...</td>\n",
       "      <td>65+3</td>\n",
       "      <td>65+3</td>\n",
       "      <td>61+3</td>\n",
       "      <td>56+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>56+3</td>\n",
       "      <td>17+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/041/236/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/player/167495/manuel-neuer/150002</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>M. Neuer</td>\n",
       "      <td>Manuel Peter Neuer</td>\n",
       "      <td>GK</td>\n",
       "      <td>1986-03-27</td>\n",
       "      <td>Bundesliga</td>\n",
       "      <td>FC Bayern München</td>\n",
       "      <td>GK</td>\n",
       "      <td>2011-07-01</td>\n",
       "      <td>...</td>\n",
       "      <td>40+3</td>\n",
       "      <td>40+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>87+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/167/495/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161578</th>\n",
       "      <td>/player/269011/ziye-zhao/230002</td>\n",
       "      <td>2022-09-26</td>\n",
       "      <td>Zhao Ziye</td>\n",
       "      <td>赵梓业</td>\n",
       "      <td>RW</td>\n",
       "      <td>2003-10-01</td>\n",
       "      <td>Super League</td>\n",
       "      <td>Hebei CFFC</td>\n",
       "      <td>RES</td>\n",
       "      <td>2022-05-01</td>\n",
       "      <td>...</td>\n",
       "      <td>32+2</td>\n",
       "      <td>32+2</td>\n",
       "      <td>37+2</td>\n",
       "      <td>36+2</td>\n",
       "      <td>31+2</td>\n",
       "      <td>31+2</td>\n",
       "      <td>31+2</td>\n",
       "      <td>36+2</td>\n",
       "      <td>14+2</td>\n",
       "      <td>https://cdn.sofifa.net/players/269/011/23_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161579</th>\n",
       "      <td>/player/269019/junjie-wu/230002</td>\n",
       "      <td>2022-09-26</td>\n",
       "      <td>Wu Junjie</td>\n",
       "      <td>吴俊杰</td>\n",
       "      <td>LB</td>\n",
       "      <td>2003-06-02</td>\n",
       "      <td>Super League</td>\n",
       "      <td>Guangzhou R&amp;F</td>\n",
       "      <td>RES</td>\n",
       "      <td>2022-05-01</td>\n",
       "      <td>...</td>\n",
       "      <td>41+2</td>\n",
       "      <td>41+2</td>\n",
       "      <td>43+2</td>\n",
       "      <td>44+2</td>\n",
       "      <td>48+2</td>\n",
       "      <td>48+2</td>\n",
       "      <td>48+2</td>\n",
       "      <td>44+2</td>\n",
       "      <td>15+2</td>\n",
       "      <td>https://cdn.sofifa.net/players/269/019/23_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161580</th>\n",
       "      <td>/player/271093/kailin-barlow/230002</td>\n",
       "      <td>2022-09-26</td>\n",
       "      <td>K. Barlow</td>\n",
       "      <td>Kailin Barlow</td>\n",
       "      <td>CDM</td>\n",
       "      <td>2003-06-28</td>\n",
       "      <td>Premier Division</td>\n",
       "      <td>Sligo Rovers</td>\n",
       "      <td>RES</td>\n",
       "      <td>2021-11-02</td>\n",
       "      <td>...</td>\n",
       "      <td>45+2</td>\n",
       "      <td>45+2</td>\n",
       "      <td>47+2</td>\n",
       "      <td>47+2</td>\n",
       "      <td>46+2</td>\n",
       "      <td>46+2</td>\n",
       "      <td>46+2</td>\n",
       "      <td>47+2</td>\n",
       "      <td>14+2</td>\n",
       "      <td>https://cdn.sofifa.net/players/271/093/23_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161581</th>\n",
       "      <td>/player/271555/gideon-tetteh/230002</td>\n",
       "      <td>2022-09-26</td>\n",
       "      <td>G. Tetteh</td>\n",
       "      <td>Gideon Tetteh</td>\n",
       "      <td>RW, LW</td>\n",
       "      <td>2005-05-20</td>\n",
       "      <td>Premier Division</td>\n",
       "      <td>Shamrock Rovers</td>\n",
       "      <td>RES</td>\n",
       "      <td>2022-06-24</td>\n",
       "      <td>...</td>\n",
       "      <td>30+2</td>\n",
       "      <td>30+2</td>\n",
       "      <td>34+2</td>\n",
       "      <td>32+2</td>\n",
       "      <td>28+2</td>\n",
       "      <td>28+2</td>\n",
       "      <td>28+2</td>\n",
       "      <td>32+2</td>\n",
       "      <td>15+2</td>\n",
       "      <td>https://cdn.sofifa.net/players/271/555/23_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161582</th>\n",
       "      <td>/player/271608/aqeel-al-dhafeeri/230002</td>\n",
       "      <td>2022-09-26</td>\n",
       "      <td>A. Al Dhafeeri</td>\n",
       "      <td>Aqeel Al Dhafeeri</td>\n",
       "      <td>CB</td>\n",
       "      <td>2004-07-09</td>\n",
       "      <td>Pro League</td>\n",
       "      <td>Al Batin</td>\n",
       "      <td>RES</td>\n",
       "      <td>2022-08-26</td>\n",
       "      <td>...</td>\n",
       "      <td>40+2</td>\n",
       "      <td>40+2</td>\n",
       "      <td>39+2</td>\n",
       "      <td>41+2</td>\n",
       "      <td>46+2</td>\n",
       "      <td>46+2</td>\n",
       "      <td>46+2</td>\n",
       "      <td>41+2</td>\n",
       "      <td>13+2</td>\n",
       "      <td>https://cdn.sofifa.net/players/271/608/23_120.png</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>161583 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              player_url fifa_update_date  \\\n",
       "0                     /player/158023/lionel-messi/150002       2014-09-18   \n",
       "1       /player/20801/c-ronaldo-dos-santos-aveiro/150002       2014-09-18   \n",
       "2                       /player/9014/arjen-robben/150002       2014-09-18   \n",
       "3                /player/41236/zlatan-ibrahimovic/150002       2014-09-18   \n",
       "4                     /player/167495/manuel-neuer/150002       2014-09-18   \n",
       "...                                                  ...              ...   \n",
       "161578                   /player/269011/ziye-zhao/230002       2022-09-26   \n",
       "161579                   /player/269019/junjie-wu/230002       2022-09-26   \n",
       "161580               /player/271093/kailin-barlow/230002       2022-09-26   \n",
       "161581               /player/271555/gideon-tetteh/230002       2022-09-26   \n",
       "161582           /player/271608/aqeel-al-dhafeeri/230002       2022-09-26   \n",
       "\n",
       "               short_name                            long_name  \\\n",
       "0                L. Messi       Lionel Andrés Messi Cuccittini   \n",
       "1       Cristiano Ronaldo  Cristiano Ronaldo dos Santos Aveiro   \n",
       "2               A. Robben                         Arjen Robben   \n",
       "3          Z. Ibrahimović                   Zlatan Ibrahimović   \n",
       "4                M. Neuer                   Manuel Peter Neuer   \n",
       "...                   ...                                  ...   \n",
       "161578          Zhao Ziye                                  赵梓业   \n",
       "161579          Wu Junjie                                  吴俊杰   \n",
       "161580          K. Barlow                        Kailin Barlow   \n",
       "161581          G. Tetteh                        Gideon Tetteh   \n",
       "161582     A. Al Dhafeeri                    Aqeel Al Dhafeeri   \n",
       "\n",
       "       player_positions         dob       league_name            club_name  \\\n",
       "0                    CF  1987-06-24           La Liga         FC Barcelona   \n",
       "1                LW, LM  1985-02-05           La Liga       Real Madrid CF   \n",
       "2            RM, LM, RW  1984-01-23        Bundesliga    FC Bayern München   \n",
       "3                    ST  1981-10-03           Ligue 1  Paris Saint-Germain   \n",
       "4                    GK  1986-03-27        Bundesliga    FC Bayern München   \n",
       "...                 ...         ...               ...                  ...   \n",
       "161578               RW  2003-10-01      Super League           Hebei CFFC   \n",
       "161579               LB  2003-06-02      Super League        Guangzhou R&F   \n",
       "161580              CDM  2003-06-28  Premier Division         Sligo Rovers   \n",
       "161581           RW, LW  2005-05-20  Premier Division      Shamrock Rovers   \n",
       "161582               CB  2004-07-09        Pro League             Al Batin   \n",
       "\n",
       "       club_position club_joined_date  ...   cdm   rdm   rwb    lb   lcb  \\\n",
       "0                 CF       2004-07-01  ...  62+3  62+3  62+3  54+3  45+3   \n",
       "1                 LW       2009-07-01  ...  63+3  63+3  63+3  57+3  52+3   \n",
       "2                SUB       2009-08-28  ...  64+3  64+3  64+3  55+3  46+3   \n",
       "3                 ST       2012-07-01  ...  65+3  65+3  61+3  56+3  55+3   \n",
       "4                 GK       2011-07-01  ...  40+3  40+3  36+3  36+3  38+3   \n",
       "...              ...              ...  ...   ...   ...   ...   ...   ...   \n",
       "161578           RES       2022-05-01  ...  32+2  32+2  37+2  36+2  31+2   \n",
       "161579           RES       2022-05-01  ...  41+2  41+2  43+2  44+2  48+2   \n",
       "161580           RES       2021-11-02  ...  45+2  45+2  47+2  47+2  46+2   \n",
       "161581           RES       2022-06-24  ...  30+2  30+2  34+2  32+2  28+2   \n",
       "161582           RES       2022-08-26  ...  40+2  40+2  39+2  41+2  46+2   \n",
       "\n",
       "          cb   rcb    rb    gk  \\\n",
       "0       45+3  45+3  54+3  15+3   \n",
       "1       52+3  52+3  57+3  16+3   \n",
       "2       46+3  46+3  55+3  14+3   \n",
       "3       55+3  55+3  56+3  17+3   \n",
       "4       38+3  38+3  36+3  87+3   \n",
       "...      ...   ...   ...   ...   \n",
       "161578  31+2  31+2  36+2  14+2   \n",
       "161579  48+2  48+2  44+2  15+2   \n",
       "161580  46+2  46+2  47+2  14+2   \n",
       "161581  28+2  28+2  32+2  15+2   \n",
       "161582  46+2  46+2  41+2  13+2   \n",
       "\n",
       "                                          player_face_url  \n",
       "0       https://cdn.sofifa.net/players/158/023/15_120.png  \n",
       "1       https://cdn.sofifa.net/players/020/801/15_120.png  \n",
       "2       https://cdn.sofifa.net/players/009/014/15_120.png  \n",
       "3       https://cdn.sofifa.net/players/041/236/15_120.png  \n",
       "4       https://cdn.sofifa.net/players/167/495/15_120.png  \n",
       "...                                                   ...  \n",
       "161578  https://cdn.sofifa.net/players/269/011/23_120.png  \n",
       "161579  https://cdn.sofifa.net/players/269/019/23_120.png  \n",
       "161580  https://cdn.sofifa.net/players/271/093/23_120.png  \n",
       "161581  https://cdn.sofifa.net/players/271/555/23_120.png  \n",
       "161582  https://cdn.sofifa.net/players/271/608/23_120.png  \n",
       "\n",
       "[161583 rows x 43 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categoric_cols= df_cleaned.select_dtypes(include=['object'])\n",
    "categoric_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "42edcd45-3b8c-4d14-91ec-39fc2954a048",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player_id</th>\n",
       "      <th>fifa_version</th>\n",
       "      <th>fifa_update</th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>value_eur</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>age</th>\n",
       "      <th>height_cm</th>\n",
       "      <th>weight_kg</th>\n",
       "      <th>...</th>\n",
       "      <th>mentality_penalties</th>\n",
       "      <th>mentality_composure</th>\n",
       "      <th>defending_marking_awareness</th>\n",
       "      <th>defending_standing_tackle</th>\n",
       "      <th>defending_sliding_tackle</th>\n",
       "      <th>goalkeeping_diving</th>\n",
       "      <th>goalkeeping_handling</th>\n",
       "      <th>goalkeeping_kicking</th>\n",
       "      <th>goalkeeping_positioning</th>\n",
       "      <th>goalkeeping_reflexes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>158023</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>93</td>\n",
       "      <td>95</td>\n",
       "      <td>100500000.0</td>\n",
       "      <td>550000.0</td>\n",
       "      <td>27</td>\n",
       "      <td>169</td>\n",
       "      <td>67</td>\n",
       "      <td>...</td>\n",
       "      <td>76</td>\n",
       "      <td>57.816892</td>\n",
       "      <td>25</td>\n",
       "      <td>21</td>\n",
       "      <td>20</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20801</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>92</td>\n",
       "      <td>92</td>\n",
       "      <td>79000000.0</td>\n",
       "      <td>375000.0</td>\n",
       "      <td>29</td>\n",
       "      <td>185</td>\n",
       "      <td>80</td>\n",
       "      <td>...</td>\n",
       "      <td>85</td>\n",
       "      <td>57.816892</td>\n",
       "      <td>22</td>\n",
       "      <td>31</td>\n",
       "      <td>23</td>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9014</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>54500000.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>30</td>\n",
       "      <td>180</td>\n",
       "      <td>80</td>\n",
       "      <td>...</td>\n",
       "      <td>80</td>\n",
       "      <td>57.816892</td>\n",
       "      <td>29</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>11</td>\n",
       "      <td>5</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>41236</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>52500000.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>32</td>\n",
       "      <td>195</td>\n",
       "      <td>95</td>\n",
       "      <td>...</td>\n",
       "      <td>91</td>\n",
       "      <td>57.816892</td>\n",
       "      <td>25</td>\n",
       "      <td>41</td>\n",
       "      <td>27</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>167495</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>63500000.0</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>28</td>\n",
       "      <td>193</td>\n",
       "      <td>92</td>\n",
       "      <td>...</td>\n",
       "      <td>37</td>\n",
       "      <td>57.816892</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>87</td>\n",
       "      <td>85</td>\n",
       "      <td>92</td>\n",
       "      <td>90</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161578</th>\n",
       "      <td>269011</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>46</td>\n",
       "      <td>61</td>\n",
       "      <td>110000.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>18</td>\n",
       "      <td>180</td>\n",
       "      <td>73</td>\n",
       "      <td>...</td>\n",
       "      <td>54</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>23</td>\n",
       "      <td>21</td>\n",
       "      <td>25</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161579</th>\n",
       "      <td>269019</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>46</td>\n",
       "      <td>58</td>\n",
       "      <td>110000.0</td>\n",
       "      <td>750.0</td>\n",
       "      <td>19</td>\n",
       "      <td>188</td>\n",
       "      <td>83</td>\n",
       "      <td>...</td>\n",
       "      <td>31</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>50</td>\n",
       "      <td>51</td>\n",
       "      <td>45</td>\n",
       "      <td>6</td>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>13</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161580</th>\n",
       "      <td>271093</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>46</td>\n",
       "      <td>58</td>\n",
       "      <td>110000.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>19</td>\n",
       "      <td>181</td>\n",
       "      <td>73</td>\n",
       "      <td>...</td>\n",
       "      <td>37</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>36</td>\n",
       "      <td>45</td>\n",
       "      <td>50</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>14</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161581</th>\n",
       "      <td>271555</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>46</td>\n",
       "      <td>70</td>\n",
       "      <td>150000.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>17</td>\n",
       "      <td>175</td>\n",
       "      <td>68</td>\n",
       "      <td>...</td>\n",
       "      <td>63</td>\n",
       "      <td>43.000000</td>\n",
       "      <td>19</td>\n",
       "      <td>17</td>\n",
       "      <td>14</td>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "      <td>7</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161582</th>\n",
       "      <td>271608</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>46</td>\n",
       "      <td>63</td>\n",
       "      <td>110000.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>17</td>\n",
       "      <td>180</td>\n",
       "      <td>70</td>\n",
       "      <td>...</td>\n",
       "      <td>25</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>50</td>\n",
       "      <td>45</td>\n",
       "      <td>42</td>\n",
       "      <td>13</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>161583 rows × 59 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        player_id  fifa_version  fifa_update  overall  potential    value_eur  \\\n",
       "0          158023            15            2       93         95  100500000.0   \n",
       "1           20801            15            2       92         92   79000000.0   \n",
       "2            9014            15            2       90         90   54500000.0   \n",
       "3           41236            15            2       90         90   52500000.0   \n",
       "4          167495            15            2       90         90   63500000.0   \n",
       "...           ...           ...          ...      ...        ...          ...   \n",
       "161578     269011            23            2       46         61     110000.0   \n",
       "161579     269019            23            2       46         58     110000.0   \n",
       "161580     271093            23            2       46         58     110000.0   \n",
       "161581     271555            23            2       46         70     150000.0   \n",
       "161582     271608            23            2       46         63     110000.0   \n",
       "\n",
       "        wage_eur  age  height_cm  weight_kg  ...  mentality_penalties  \\\n",
       "0       550000.0   27        169         67  ...                   76   \n",
       "1       375000.0   29        185         80  ...                   85   \n",
       "2       275000.0   30        180         80  ...                   80   \n",
       "3       275000.0   32        195         95  ...                   91   \n",
       "4       300000.0   28        193         92  ...                   37   \n",
       "...          ...  ...        ...        ...  ...                  ...   \n",
       "161578     700.0   18        180         73  ...                   54   \n",
       "161579     750.0   19        188         83  ...                   31   \n",
       "161580     500.0   19        181         73  ...                   37   \n",
       "161581     500.0   17        175         68  ...                   63   \n",
       "161582     500.0   17        180         70  ...                   25   \n",
       "\n",
       "        mentality_composure  defending_marking_awareness  \\\n",
       "0                 57.816892                           25   \n",
       "1                 57.816892                           22   \n",
       "2                 57.816892                           29   \n",
       "3                 57.816892                           25   \n",
       "4                 57.816892                           25   \n",
       "...                     ...                          ...   \n",
       "161578            40.000000                           23   \n",
       "161579            35.000000                           50   \n",
       "161580            35.000000                           36   \n",
       "161581            43.000000                           19   \n",
       "161582            30.000000                           50   \n",
       "\n",
       "        defending_standing_tackle  defending_sliding_tackle  \\\n",
       "0                              21                        20   \n",
       "1                              31                        23   \n",
       "2                              26                        26   \n",
       "3                              41                        27   \n",
       "4                              25                        25   \n",
       "...                           ...                       ...   \n",
       "161578                         21                        25   \n",
       "161579                         51                        45   \n",
       "161580                         45                        50   \n",
       "161581                         17                        14   \n",
       "161582                         45                        42   \n",
       "\n",
       "        goalkeeping_diving  goalkeeping_handling  goalkeeping_kicking  \\\n",
       "0                        6                    11                   15   \n",
       "1                        7                    11                   15   \n",
       "2                       10                     8                   11   \n",
       "3                       13                    15                   10   \n",
       "4                       87                    85                   92   \n",
       "...                    ...                   ...                  ...   \n",
       "161578                   9                    13                   13   \n",
       "161579                   6                    14                    8   \n",
       "161580                   8                     9                    7   \n",
       "161581                  13                    12                   14   \n",
       "161582                  13                     7                    6   \n",
       "\n",
       "        goalkeeping_positioning  goalkeeping_reflexes  \n",
       "0                            14                     8  \n",
       "1                            14                    11  \n",
       "2                             5                    15  \n",
       "3                             9                    12  \n",
       "4                            90                    86  \n",
       "...                         ...                   ...  \n",
       "161578                       12                     7  \n",
       "161579                       13                    14  \n",
       "161580                       14                     9  \n",
       "161581                        7                    13  \n",
       "161582                        6                    14  \n",
       "\n",
       "[161583 rows x 59 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numerical_cols = numerical_cols.fillna(numerical_cols.mean())\n",
    "numerical_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "d91416eb-6291-40ec-be3a-d565b84c9f57",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Encoded Categorical Columns:\n",
      "   player_url  fifa_update_date  short_name  long_name  player_positions  \\\n",
      "0        6371                 0       25712      27597               412   \n",
      "1       55125                 0        8371       8920              1128   \n",
      "2      161562                 0        3092       4477              1541   \n",
      "3      160396                 0       45328      47262              1838   \n",
      "4        9990                 0       29784      29564               719   \n",
      "\n",
      "    dob  league_name  club_name  club_position  club_joined_date  ...  cdm  \\\n",
      "0  2854           15        478              3                48  ...  216   \n",
      "1  2003           15       1013             14               249  ...  228   \n",
      "2  1639            6        481             28               268  ...  238   \n",
      "3   921           26        947             27               659  ...  249   \n",
      "4  2409            6        481              5               481  ...   87   \n",
      "\n",
      "   rdm  rwb   lb  lcb   cb  rcb   rb   gk  player_face_url  \n",
      "0  216  204  151  111  111  111  151   25             8069  \n",
      "1  228  215  170  155  155  155  170   29              697  \n",
      "2  238  225  156  116  116  116  156   20              313  \n",
      "3  249  195  163  178  178  178  163   34              878  \n",
      "4   87   77   79   82   82   82   79  252            11661  \n",
      "\n",
      "[5 rows x 43 columns]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "encoder = LabelEncoder()\n",
    "\n",
    "# Apply label encoder to each categorical column\n",
    "factorizedData = categoric_cols.apply(encoder.fit_transform)\n",
    "print(\"Encoded Categorical Columns:\")\n",
    "print(factorizedData.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "7048142d-c8a6-48f8-9578-d91cba2a8a91",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Concatenation of numerical values and encoded categorical values \n",
    "df = pd.concat([numerical_cols,factorizedData], axis =1)\n",
    "df = df.fillna(df.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "cf801157-f2f0-420a-9861-c4080154128f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player_id</th>\n",
       "      <th>fifa_version</th>\n",
       "      <th>fifa_update</th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>value_eur</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>age</th>\n",
       "      <th>height_cm</th>\n",
       "      <th>weight_kg</th>\n",
       "      <th>...</th>\n",
       "      <th>cdm</th>\n",
       "      <th>rdm</th>\n",
       "      <th>rwb</th>\n",
       "      <th>lb</th>\n",
       "      <th>lcb</th>\n",
       "      <th>cb</th>\n",
       "      <th>rcb</th>\n",
       "      <th>rb</th>\n",
       "      <th>gk</th>\n",
       "      <th>player_face_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>158023</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>93</td>\n",
       "      <td>95</td>\n",
       "      <td>100500000.0</td>\n",
       "      <td>550000.0</td>\n",
       "      <td>27</td>\n",
       "      <td>169</td>\n",
       "      <td>67</td>\n",
       "      <td>...</td>\n",
       "      <td>216</td>\n",
       "      <td>216</td>\n",
       "      <td>204</td>\n",
       "      <td>151</td>\n",
       "      <td>111</td>\n",
       "      <td>111</td>\n",
       "      <td>111</td>\n",
       "      <td>151</td>\n",
       "      <td>25</td>\n",
       "      <td>8069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20801</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>92</td>\n",
       "      <td>92</td>\n",
       "      <td>79000000.0</td>\n",
       "      <td>375000.0</td>\n",
       "      <td>29</td>\n",
       "      <td>185</td>\n",
       "      <td>80</td>\n",
       "      <td>...</td>\n",
       "      <td>228</td>\n",
       "      <td>228</td>\n",
       "      <td>215</td>\n",
       "      <td>170</td>\n",
       "      <td>155</td>\n",
       "      <td>155</td>\n",
       "      <td>155</td>\n",
       "      <td>170</td>\n",
       "      <td>29</td>\n",
       "      <td>697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9014</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>54500000.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>30</td>\n",
       "      <td>180</td>\n",
       "      <td>80</td>\n",
       "      <td>...</td>\n",
       "      <td>238</td>\n",
       "      <td>238</td>\n",
       "      <td>225</td>\n",
       "      <td>156</td>\n",
       "      <td>116</td>\n",
       "      <td>116</td>\n",
       "      <td>116</td>\n",
       "      <td>156</td>\n",
       "      <td>20</td>\n",
       "      <td>313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>41236</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>52500000.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>32</td>\n",
       "      <td>195</td>\n",
       "      <td>95</td>\n",
       "      <td>...</td>\n",
       "      <td>249</td>\n",
       "      <td>249</td>\n",
       "      <td>195</td>\n",
       "      <td>163</td>\n",
       "      <td>178</td>\n",
       "      <td>178</td>\n",
       "      <td>178</td>\n",
       "      <td>163</td>\n",
       "      <td>34</td>\n",
       "      <td>878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>167495</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>63500000.0</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>28</td>\n",
       "      <td>193</td>\n",
       "      <td>92</td>\n",
       "      <td>...</td>\n",
       "      <td>87</td>\n",
       "      <td>87</td>\n",
       "      <td>77</td>\n",
       "      <td>79</td>\n",
       "      <td>82</td>\n",
       "      <td>82</td>\n",
       "      <td>82</td>\n",
       "      <td>79</td>\n",
       "      <td>252</td>\n",
       "      <td>11661</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 102 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   player_id  fifa_version  fifa_update  overall  potential    value_eur  \\\n",
       "0     158023            15            2       93         95  100500000.0   \n",
       "1      20801            15            2       92         92   79000000.0   \n",
       "2       9014            15            2       90         90   54500000.0   \n",
       "3      41236            15            2       90         90   52500000.0   \n",
       "4     167495            15            2       90         90   63500000.0   \n",
       "\n",
       "   wage_eur  age  height_cm  weight_kg  ...  cdm  rdm  rwb   lb  lcb   cb  \\\n",
       "0  550000.0   27        169         67  ...  216  216  204  151  111  111   \n",
       "1  375000.0   29        185         80  ...  228  228  215  170  155  155   \n",
       "2  275000.0   30        180         80  ...  238  238  225  156  116  116   \n",
       "3  275000.0   32        195         95  ...  249  249  195  163  178  178   \n",
       "4  300000.0   28        193         92  ...   87   87   77   79   82   82   \n",
       "\n",
       "   rcb   rb   gk  player_face_url  \n",
       "0  111  151   25             8069  \n",
       "1  155  170   29              697  \n",
       "2  116  156   20              313  \n",
       "3  178  163   34              878  \n",
       "4   82   79  252            11661  \n",
       "\n",
       "[5 rows x 102 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "2070d4d1-9be9-4716-aa94-1890c6f9e2d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop([\"player_url\", \"short_name\",\"long_name\", \"player_face_url\"], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "682f753b-4717-41ff-9eb5-76ebf083a421",
   "metadata": {},
   "outputs": [],
   "source": [
    "y= df[\"overall\"]\n",
    "x = df.drop([\"overall\"], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "0f399a09-06b2-410c-997c-d4e51513d789",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "scaled = StandardScaler()\n",
    "data_scaled= scaled.fit_transform(x)\n",
    "x = pd.DataFrame(data_scaled, columns = x.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "1f4a14d0-1b16-48ba-baad-daf62846157e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player_id</th>\n",
       "      <th>fifa_version</th>\n",
       "      <th>fifa_update</th>\n",
       "      <th>potential</th>\n",
       "      <th>value_eur</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>age</th>\n",
       "      <th>height_cm</th>\n",
       "      <th>weight_kg</th>\n",
       "      <th>league_id</th>\n",
       "      <th>...</th>\n",
       "      <th>ldm</th>\n",
       "      <th>cdm</th>\n",
       "      <th>rdm</th>\n",
       "      <th>rwb</th>\n",
       "      <th>lb</th>\n",
       "      <th>lcb</th>\n",
       "      <th>cb</th>\n",
       "      <th>rcb</th>\n",
       "      <th>rb</th>\n",
       "      <th>gk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.616494</td>\n",
       "      <td>-1.611964</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.875315</td>\n",
       "      <td>16.451449</td>\n",
       "      <td>24.706815</td>\n",
       "      <td>0.401872</td>\n",
       "      <td>-1.813330</td>\n",
       "      <td>-1.176360</td>\n",
       "      <td>-0.355938</td>\n",
       "      <td>...</td>\n",
       "      <td>0.526082</td>\n",
       "      <td>0.526082</td>\n",
       "      <td>0.526082</td>\n",
       "      <td>0.482823</td>\n",
       "      <td>-0.208506</td>\n",
       "      <td>-0.680472</td>\n",
       "      <td>-0.680472</td>\n",
       "      <td>-0.680472</td>\n",
       "      <td>-0.208506</td>\n",
       "      <td>-0.399360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-5.545148</td>\n",
       "      <td>-1.611964</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.396013</td>\n",
       "      <td>12.848571</td>\n",
       "      <td>16.687273</td>\n",
       "      <td>0.830120</td>\n",
       "      <td>0.556996</td>\n",
       "      <td>0.680668</td>\n",
       "      <td>-0.355938</td>\n",
       "      <td>...</td>\n",
       "      <td>0.663835</td>\n",
       "      <td>0.663835</td>\n",
       "      <td>0.663835</td>\n",
       "      <td>0.623498</td>\n",
       "      <td>0.024006</td>\n",
       "      <td>-0.257384</td>\n",
       "      <td>-0.257384</td>\n",
       "      <td>-0.257384</td>\n",
       "      <td>0.024006</td>\n",
       "      <td>-0.315501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-5.882609</td>\n",
       "      <td>-1.611964</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.076478</td>\n",
       "      <td>8.742966</td>\n",
       "      <td>12.104678</td>\n",
       "      <td>1.044244</td>\n",
       "      <td>-0.183731</td>\n",
       "      <td>0.680668</td>\n",
       "      <td>-0.432820</td>\n",
       "      <td>...</td>\n",
       "      <td>0.778629</td>\n",
       "      <td>0.778629</td>\n",
       "      <td>0.778629</td>\n",
       "      <td>0.751384</td>\n",
       "      <td>-0.147319</td>\n",
       "      <td>-0.632394</td>\n",
       "      <td>-0.632394</td>\n",
       "      <td>-0.632394</td>\n",
       "      <td>-0.147319</td>\n",
       "      <td>-0.504184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-4.960096</td>\n",
       "      <td>-1.611964</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.076478</td>\n",
       "      <td>8.407815</td>\n",
       "      <td>12.104678</td>\n",
       "      <td>1.472491</td>\n",
       "      <td>2.038450</td>\n",
       "      <td>2.823392</td>\n",
       "      <td>-0.439603</td>\n",
       "      <td>...</td>\n",
       "      <td>0.904902</td>\n",
       "      <td>0.904902</td>\n",
       "      <td>0.904902</td>\n",
       "      <td>0.367726</td>\n",
       "      <td>-0.061656</td>\n",
       "      <td>-0.036224</td>\n",
       "      <td>-0.036224</td>\n",
       "      <td>-0.036224</td>\n",
       "      <td>-0.061656</td>\n",
       "      <td>-0.210678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.345312</td>\n",
       "      <td>-1.611964</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.076478</td>\n",
       "      <td>10.251147</td>\n",
       "      <td>13.250326</td>\n",
       "      <td>0.615996</td>\n",
       "      <td>1.742159</td>\n",
       "      <td>2.394847</td>\n",
       "      <td>-0.432820</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.954758</td>\n",
       "      <td>-0.954758</td>\n",
       "      <td>-0.954758</td>\n",
       "      <td>-1.141329</td>\n",
       "      <td>-1.089603</td>\n",
       "      <td>-0.959326</td>\n",
       "      <td>-0.959326</td>\n",
       "      <td>-0.959326</td>\n",
       "      <td>-1.089603</td>\n",
       "      <td>4.359634</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 97 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   player_id  fifa_version  fifa_update  potential  value_eur   wage_eur  \\\n",
       "0  -1.616494     -1.611964          0.0   3.875315  16.451449  24.706815   \n",
       "1  -5.545148     -1.611964          0.0   3.396013  12.848571  16.687273   \n",
       "2  -5.882609     -1.611964          0.0   3.076478   8.742966  12.104678   \n",
       "3  -4.960096     -1.611964          0.0   3.076478   8.407815  12.104678   \n",
       "4  -1.345312     -1.611964          0.0   3.076478  10.251147  13.250326   \n",
       "\n",
       "        age  height_cm  weight_kg  league_id  ...       ldm       cdm  \\\n",
       "0  0.401872  -1.813330  -1.176360  -0.355938  ...  0.526082  0.526082   \n",
       "1  0.830120   0.556996   0.680668  -0.355938  ...  0.663835  0.663835   \n",
       "2  1.044244  -0.183731   0.680668  -0.432820  ...  0.778629  0.778629   \n",
       "3  1.472491   2.038450   2.823392  -0.439603  ...  0.904902  0.904902   \n",
       "4  0.615996   1.742159   2.394847  -0.432820  ... -0.954758 -0.954758   \n",
       "\n",
       "        rdm       rwb        lb       lcb        cb       rcb        rb  \\\n",
       "0  0.526082  0.482823 -0.208506 -0.680472 -0.680472 -0.680472 -0.208506   \n",
       "1  0.663835  0.623498  0.024006 -0.257384 -0.257384 -0.257384  0.024006   \n",
       "2  0.778629  0.751384 -0.147319 -0.632394 -0.632394 -0.632394 -0.147319   \n",
       "3  0.904902  0.367726 -0.061656 -0.036224 -0.036224 -0.036224 -0.061656   \n",
       "4 -0.954758 -1.141329 -1.089603 -0.959326 -0.959326 -0.959326 -1.089603   \n",
       "\n",
       "         gk  \n",
       "0 -0.399360  \n",
       "1 -0.315501  \n",
       "2 -0.504184  \n",
       "3 -0.210678  \n",
       "4  4.359634  \n",
       "\n",
       "[5 rows x 97 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.head()\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "fc39397e-955c-42bc-95dc-13ae5ba37808",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x1000 with 64 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Histogram of numerical columns\n",
    "df_cleaned.hist(figsize=(12,10))\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b16c651-0972-4cdf-b4c5-a9225c11e507",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "d6f1f848-2d35-4d5d-bd9e-6eb7fde5f63b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['overall', 'movement_reactions', 'potential', 'passing', 'wage_eur',\n",
      "       'cm', 'lcm', 'rcm', 'mentality_composure', 'rf'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "\n",
    "#Create feature subsets that show maximum correlation with the dependent variable.\n",
    "correl = df.corr()['overall'].abs().sort_values(ascending=False)\n",
    "top_features = correl.index[:10]\n",
    "print(top_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "f60380a3-a6ae-4fa4-8fcd-c0bb995d5236",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall</th>\n",
       "      <th>movement_reactions</th>\n",
       "      <th>potential</th>\n",
       "      <th>passing</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>cm</th>\n",
       "      <th>lcm</th>\n",
       "      <th>rcm</th>\n",
       "      <th>mentality_composure</th>\n",
       "      <th>rf</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>93</td>\n",
       "      <td>94</td>\n",
       "      <td>95</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>550000.0</td>\n",
       "      <td>330</td>\n",
       "      <td>330</td>\n",
       "      <td>330</td>\n",
       "      <td>57.816892</td>\n",
       "      <td>300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>92</td>\n",
       "      <td>90</td>\n",
       "      <td>92</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>375000.0</td>\n",
       "      <td>315</td>\n",
       "      <td>315</td>\n",
       "      <td>315</td>\n",
       "      <td>57.816892</td>\n",
       "      <td>302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>90</td>\n",
       "      <td>89</td>\n",
       "      <td>90</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>321</td>\n",
       "      <td>321</td>\n",
       "      <td>321</td>\n",
       "      <td>57.816892</td>\n",
       "      <td>291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>90</td>\n",
       "      <td>85</td>\n",
       "      <td>90</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>306</td>\n",
       "      <td>306</td>\n",
       "      <td>306</td>\n",
       "      <td>57.816892</td>\n",
       "      <td>286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>90</td>\n",
       "      <td>89</td>\n",
       "      <td>90</td>\n",
       "      <td>56.938175</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>72</td>\n",
       "      <td>72</td>\n",
       "      <td>72</td>\n",
       "      <td>57.816892</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161578</th>\n",
       "      <td>46</td>\n",
       "      <td>39</td>\n",
       "      <td>61</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>700.0</td>\n",
       "      <td>79</td>\n",
       "      <td>79</td>\n",
       "      <td>79</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161579</th>\n",
       "      <td>46</td>\n",
       "      <td>42</td>\n",
       "      <td>58</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>750.0</td>\n",
       "      <td>63</td>\n",
       "      <td>63</td>\n",
       "      <td>63</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161580</th>\n",
       "      <td>46</td>\n",
       "      <td>50</td>\n",
       "      <td>58</td>\n",
       "      <td>43.000000</td>\n",
       "      <td>500.0</td>\n",
       "      <td>103</td>\n",
       "      <td>103</td>\n",
       "      <td>103</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161581</th>\n",
       "      <td>46</td>\n",
       "      <td>45</td>\n",
       "      <td>70</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>500.0</td>\n",
       "      <td>83</td>\n",
       "      <td>83</td>\n",
       "      <td>83</td>\n",
       "      <td>43.000000</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161582</th>\n",
       "      <td>46</td>\n",
       "      <td>40</td>\n",
       "      <td>63</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>500.0</td>\n",
       "      <td>47</td>\n",
       "      <td>47</td>\n",
       "      <td>47</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>161583 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        overall  movement_reactions  potential    passing  wage_eur   cm  lcm  \\\n",
       "0            93                  94         95  86.000000  550000.0  330  330   \n",
       "1            92                  90         92  81.000000  375000.0  315  315   \n",
       "2            90                  89         90  83.000000  275000.0  321  321   \n",
       "3            90                  85         90  81.000000  275000.0  306  306   \n",
       "4            90                  89         90  56.938175  300000.0   72   72   \n",
       "...         ...                 ...        ...        ...       ...  ...  ...   \n",
       "161578       46                  39         61  40.000000     700.0   79   79   \n",
       "161579       46                  42         58  29.000000     750.0   63   63   \n",
       "161580       46                  50         58  43.000000     500.0  103  103   \n",
       "161581       46                  45         70  36.000000     500.0   83   83   \n",
       "161582       46                  40         63  26.000000     500.0   47   47   \n",
       "\n",
       "        rcm  mentality_composure   rf  \n",
       "0       330            57.816892  300  \n",
       "1       315            57.816892  302  \n",
       "2       321            57.816892  291  \n",
       "3       306            57.816892  286  \n",
       "4        72            57.816892   48  \n",
       "...     ...                  ...  ...  \n",
       "161578   79            40.000000   62  \n",
       "161579   63            35.000000   35  \n",
       "161580  103            35.000000   62  \n",
       "161581   83            43.000000   62  \n",
       "161582   47            30.000000   25  \n",
       "\n",
       "[161583 rows x 10 columns]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#subset with high correlation features\n",
    "sub_df = df[top_features]\n",
    "sub_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "afd0e3e3-3ecd-4c5e-bcd3-e1b243db68e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall</th>\n",
       "      <th>movement_reactions</th>\n",
       "      <th>potential</th>\n",
       "      <th>passing</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>cm</th>\n",
       "      <th>lcm</th>\n",
       "      <th>rcm</th>\n",
       "      <th>mentality_composure</th>\n",
       "      <th>rf</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>93</td>\n",
       "      <td>3.535775</td>\n",
       "      <td>3.875315</td>\n",
       "      <td>2.940185e+00</td>\n",
       "      <td>24.706815</td>\n",
       "      <td>2.415908</td>\n",
       "      <td>2.415908</td>\n",
       "      <td>2.415908</td>\n",
       "      <td>6.456683e-16</td>\n",
       "      <td>3.420880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>92</td>\n",
       "      <td>3.099571</td>\n",
       "      <td>3.396013</td>\n",
       "      <td>2.434335e+00</td>\n",
       "      <td>16.687273</td>\n",
       "      <td>2.198758</td>\n",
       "      <td>2.198758</td>\n",
       "      <td>2.198758</td>\n",
       "      <td>6.456683e-16</td>\n",
       "      <td>3.456231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>90</td>\n",
       "      <td>2.990520</td>\n",
       "      <td>3.076478</td>\n",
       "      <td>2.636675e+00</td>\n",
       "      <td>12.104678</td>\n",
       "      <td>2.285618</td>\n",
       "      <td>2.285618</td>\n",
       "      <td>2.285618</td>\n",
       "      <td>6.456683e-16</td>\n",
       "      <td>3.261798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>90</td>\n",
       "      <td>2.554317</td>\n",
       "      <td>3.076478</td>\n",
       "      <td>2.434335e+00</td>\n",
       "      <td>12.104678</td>\n",
       "      <td>2.068467</td>\n",
       "      <td>2.068467</td>\n",
       "      <td>2.068467</td>\n",
       "      <td>6.456683e-16</td>\n",
       "      <td>3.173420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>90</td>\n",
       "      <td>2.990520</td>\n",
       "      <td>3.076478</td>\n",
       "      <td>-7.188561e-16</td>\n",
       "      <td>13.250326</td>\n",
       "      <td>-1.319081</td>\n",
       "      <td>-1.319081</td>\n",
       "      <td>-1.319081</td>\n",
       "      <td>6.456683e-16</td>\n",
       "      <td>-1.033397</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   overall  movement_reactions  potential       passing   wage_eur        cm  \\\n",
       "0       93            3.535775   3.875315  2.940185e+00  24.706815  2.415908   \n",
       "1       92            3.099571   3.396013  2.434335e+00  16.687273  2.198758   \n",
       "2       90            2.990520   3.076478  2.636675e+00  12.104678  2.285618   \n",
       "3       90            2.554317   3.076478  2.434335e+00  12.104678  2.068467   \n",
       "4       90            2.990520   3.076478 -7.188561e-16  13.250326 -1.319081   \n",
       "\n",
       "        lcm       rcm  mentality_composure        rf  \n",
       "0  2.415908  2.415908         6.456683e-16  3.420880  \n",
       "1  2.198758  2.198758         6.456683e-16  3.456231  \n",
       "2  2.285618  2.285618         6.456683e-16  3.261798  \n",
       "3  2.068467  2.068467         6.456683e-16  3.173420  \n",
       "4 -1.319081 -1.319081         6.456683e-16 -1.033397  "
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#scale the subset dataframe with the correlation features\n",
    "scaler = StandardScaler()\n",
    "scaled_features = scaler.fit_transform(sub_df[top_features])  # Scale selected features\n",
    "scaled_df = pd.DataFrame(scaled_features, columns=top_features)  # Convert to DataFrame\n",
    "\n",
    "scaled_df['overall']=df['overall']\n",
    "scaled_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "3e660466-b523-439e-97bf-2277dc1ba7b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "columns = scaled_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "37ef813c-bb6b-40f1-9075-46347ed8178d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split, cross_val_score, KFold\n",
    "# Separate features and target variable\n",
    "X = scaled_df.drop(columns=['overall'])\n",
    "y = scaled_df['overall']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "bc672e23-694d-4bec-a7b0-65e70036fef9",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# scaling of X data\n",
    "scaler = StandardScaler()\n",
    "scaledfinal = scaler.fit_transform(X)\n",
    "\n",
    "X = pd.DataFrame(scaledfinal, columns = X.columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f619491f-cc5e-40f9-b1e3-0b8463e67b41",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question 3 & 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "936c8d15-f473-434c-808f-e801cda875f2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "3bba8fdb-2231-47c6-87c8-accd760d8beb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.3110157805267884"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#first model\n",
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
    "random_model = RandomForestRegressor(n_estimators = 150)\n",
    "random_model.fit(X,y)\n",
    "rf_cv_scores = cross_val_score(random_model, X, y, cv=kf, scoring='neg_mean_squared_error')\n",
    "rf_mse_scores = -rf_cv_scores  # Convert to positive\n",
    "rf_mean_mse = np.mean(rf_mse_scores)\n",
    "rf_mean_mse\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "66ab00ad-1442-4d6e-9578-353f0907319d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.6604766471062162"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#second model\n",
    "from sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor\n",
    "gradient_model = GradientBoostingRegressor(n_estimators = 1000, learning_rate=0.2)\n",
    "gradient_model.fit(X,y)\n",
    "\n",
    "gbr_cv_scores = cross_val_score(gradient_model, X, y, cv=kf, scoring='neg_mean_squared_error')\n",
    "gbr_mse_scores = -gbr_cv_scores  # Convert to positive\n",
    "gbr_mean_mse = np.mean(gbr_mse_scores)\n",
    "gbr_mean_mse\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "8f402726-b6af-4d71-8e56-15091db83ce2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.6451382630407805"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#thrid model \n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "dtree_model = DecisionTreeRegressor()\n",
    "dtree_model.fit(X, y)\n",
    "\n",
    "dtree_cv_scores = cross_val_score(dtree_model, X, y, cv=kf, scoring='neg_mean_squared_error')\n",
    "dtree_mse_scores = -dtree_cv_scores  # Convert to positive\n",
    "dtree_mean_mse = np.mean(dtree_mse_scores)\n",
    "\n",
    "dtree_mean_mse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa8d20c9-f3e6-4c13-adf3-141dc133c89a",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from scipy.stats import randint\n",
    "param_dist_rf = {\n",
    "    'n_estimators': randint(100, 200),\n",
    "    'max_depth': [None, 10, 20, 30],\n",
    "    'min_samples_split': randint(2, 10),\n",
    "    'min_samples_leaf': randint(1, 4)\n",
    "}\n",
    "random_search_rf = RandomizedSearchCV(estimator=RandomForestRegressor(random_state=42), \n",
    "                                      param_distributions=param_dist_rf, \n",
    "                                      n_iter=20,  # Number of parameter settings that are sampled\n",
    "                                      cv=3,, \n",
    "                                      scoring='neg_mean_squared_error', \n",
    "                                      n_jobs=-1,\n",
    "                                      verbose=2,\n",
    "                                      random_state=42)\n",
    "random_search_rf.fit(X, y)\n",
    "\n",
    "# Get the best model\n",
    "best_rf_model = random_search_rf.best_estimator_\n",
    "print(\"Best Parameters: \", random_search_rf.best_params_)'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6817255-a537-4720-ad7d-44bfe037c83b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "faefc5ab-98ed-4532-9788-440fca18b021",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Testing our model on unseen data\n",
    "player_url = \"C:\\\\Users\\\\user\\\\Downloads\\\\players_22-1.csv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "134086dd-0624-4846-aee2-39d4186c0116",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data = pd.read_csv(player_url, low_memory=False, usecols= columns)\n",
    "test_data.head()\n",
    "test_data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "b5f83283-5039-43ec-8524-1ac87b9a1cc5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>passing</th>\n",
       "      <th>movement_reactions</th>\n",
       "      <th>mentality_composure</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>93</td>\n",
       "      <td>93</td>\n",
       "      <td>320000.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>94</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>92</td>\n",
       "      <td>92</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>93</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>91</td>\n",
       "      <td>91</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>94</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>91</td>\n",
       "      <td>91</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>89</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>91</td>\n",
       "      <td>91</td>\n",
       "      <td>350000.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>91</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19234</th>\n",
       "      <td>47</td>\n",
       "      <td>52</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>53</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19235</th>\n",
       "      <td>47</td>\n",
       "      <td>59</td>\n",
       "      <td>500.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>49</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19236</th>\n",
       "      <td>47</td>\n",
       "      <td>55</td>\n",
       "      <td>500.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>46</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19237</th>\n",
       "      <td>47</td>\n",
       "      <td>60</td>\n",
       "      <td>500.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>48</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19238</th>\n",
       "      <td>47</td>\n",
       "      <td>60</td>\n",
       "      <td>500.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>54</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19239 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       overall  potential  wage_eur  passing  movement_reactions  \\\n",
       "0           93         93  320000.0     91.0                  94   \n",
       "1           92         92  270000.0     79.0                  93   \n",
       "2           91         91  270000.0     80.0                  94   \n",
       "3           91         91  270000.0     86.0                  89   \n",
       "4           91         91  350000.0     93.0                  91   \n",
       "...        ...        ...       ...      ...                 ...   \n",
       "19234       47         52    1000.0     46.0                  53   \n",
       "19235       47         59     500.0     50.0                  49   \n",
       "19236       47         55     500.0     45.0                  46   \n",
       "19237       47         60     500.0     36.0                  48   \n",
       "19238       47         60     500.0     45.0                  54   \n",
       "\n",
       "       mentality_composure  \n",
       "0                       96  \n",
       "1                       88  \n",
       "2                       95  \n",
       "3                       93  \n",
       "4                       89  \n",
       "...                    ...  \n",
       "19234                   37  \n",
       "19235                   47  \n",
       "19236                   36  \n",
       "19237                   47  \n",
       "19238                   36  \n",
       "\n",
       "[19239 rows x 6 columns]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_cols =test_data.select_dtypes(exclude=['object'])\n",
    "num_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "2b21b973-7362-429b-b6c5-4a95e784d716",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rf</th>\n",
       "      <th>lcm</th>\n",
       "      <th>cm</th>\n",
       "      <th>rcm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>93</td>\n",
       "      <td>87+3</td>\n",
       "      <td>87+3</td>\n",
       "      <td>87+3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>88</td>\n",
       "      <td>80+3</td>\n",
       "      <td>80+3</td>\n",
       "      <td>80+3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>89</td>\n",
       "      <td>78+3</td>\n",
       "      <td>78+3</td>\n",
       "      <td>78+3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>88</td>\n",
       "      <td>82+3</td>\n",
       "      <td>82+3</td>\n",
       "      <td>82+3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>87</td>\n",
       "      <td>89+2</td>\n",
       "      <td>89+2</td>\n",
       "      <td>89+2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19234</th>\n",
       "      <td>45</td>\n",
       "      <td>46+2</td>\n",
       "      <td>46+2</td>\n",
       "      <td>46+2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19235</th>\n",
       "      <td>46</td>\n",
       "      <td>47+2</td>\n",
       "      <td>47+2</td>\n",
       "      <td>47+2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19236</th>\n",
       "      <td>46</td>\n",
       "      <td>47+2</td>\n",
       "      <td>47+2</td>\n",
       "      <td>47+2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19237</th>\n",
       "      <td>47</td>\n",
       "      <td>39+2</td>\n",
       "      <td>39+2</td>\n",
       "      <td>39+2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19238</th>\n",
       "      <td>47</td>\n",
       "      <td>46+2</td>\n",
       "      <td>46+2</td>\n",
       "      <td>46+2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19239 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       rf   lcm    cm   rcm\n",
       "0      93  87+3  87+3  87+3\n",
       "1      88  80+3  80+3  80+3\n",
       "2      89  78+3  78+3  78+3\n",
       "3      88  82+3  82+3  82+3\n",
       "4      87  89+2  89+2  89+2\n",
       "...    ..   ...   ...   ...\n",
       "19234  45  46+2  46+2  46+2\n",
       "19235  46  47+2  47+2  47+2\n",
       "19236  46  47+2  47+2  47+2\n",
       "19237  47  39+2  39+2  39+2\n",
       "19238  47  46+2  46+2  46+2\n",
       "\n",
       "[19239 rows x 4 columns]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categor_cols= test_data.select_dtypes(include=['object'])\n",
    "categor_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "cc9b722e-2c95-434c-907c-5d7d299d38e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>passing</th>\n",
       "      <th>movement_reactions</th>\n",
       "      <th>mentality_composure</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>93</td>\n",
       "      <td>93</td>\n",
       "      <td>320000.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>94</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>92</td>\n",
       "      <td>92</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>93</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>91</td>\n",
       "      <td>91</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>94</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>91</td>\n",
       "      <td>91</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>89</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>91</td>\n",
       "      <td>91</td>\n",
       "      <td>350000.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>91</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19234</th>\n",
       "      <td>47</td>\n",
       "      <td>52</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>53</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19235</th>\n",
       "      <td>47</td>\n",
       "      <td>59</td>\n",
       "      <td>500.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>49</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19236</th>\n",
       "      <td>47</td>\n",
       "      <td>55</td>\n",
       "      <td>500.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>46</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19237</th>\n",
       "      <td>47</td>\n",
       "      <td>60</td>\n",
       "      <td>500.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>48</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19238</th>\n",
       "      <td>47</td>\n",
       "      <td>60</td>\n",
       "      <td>500.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>54</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19239 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       overall  potential  wage_eur  passing  movement_reactions  \\\n",
       "0           93         93  320000.0     91.0                  94   \n",
       "1           92         92  270000.0     79.0                  93   \n",
       "2           91         91  270000.0     80.0                  94   \n",
       "3           91         91  270000.0     86.0                  89   \n",
       "4           91         91  350000.0     93.0                  91   \n",
       "...        ...        ...       ...      ...                 ...   \n",
       "19234       47         52    1000.0     46.0                  53   \n",
       "19235       47         59     500.0     50.0                  49   \n",
       "19236       47         55     500.0     45.0                  46   \n",
       "19237       47         60     500.0     36.0                  48   \n",
       "19238       47         60     500.0     45.0                  54   \n",
       "\n",
       "       mentality_composure  \n",
       "0                       96  \n",
       "1                       88  \n",
       "2                       95  \n",
       "3                       93  \n",
       "4                       89  \n",
       "...                    ...  \n",
       "19234                   37  \n",
       "19235                   47  \n",
       "19236                   36  \n",
       "19237                   47  \n",
       "19238                   36  \n",
       "\n",
       "[19239 rows x 6 columns]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_cols = num_cols.fillna(num_cols.mean())\n",
    "num_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "4349f468-7c02-4255-8133-0c364ab957e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Encoded Categorical Columns:\n",
      "    rf  lcm   cm  rcm\n",
      "0  131  210  210  210\n",
      "1  128  186  186  186\n",
      "2  129  177  177  177\n",
      "3  128  195  195  195\n",
      "4  127  211  211  211\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Apply label encoder to each categorical column\n",
    "fData = categor_cols.apply(encoder.fit_transform)\n",
    "print(\"Encoded Categorical Columns:\")\n",
    "print(fData.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "6cb0d1e0-763f-423f-9d38-91f4fe2bdcca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>passing</th>\n",
       "      <th>movement_reactions</th>\n",
       "      <th>mentality_composure</th>\n",
       "      <th>rf</th>\n",
       "      <th>lcm</th>\n",
       "      <th>cm</th>\n",
       "      <th>rcm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>93</td>\n",
       "      <td>93</td>\n",
       "      <td>320000.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>94</td>\n",
       "      <td>96</td>\n",
       "      <td>131</td>\n",
       "      <td>210</td>\n",
       "      <td>210</td>\n",
       "      <td>210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>92</td>\n",
       "      <td>92</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>93</td>\n",
       "      <td>88</td>\n",
       "      <td>128</td>\n",
       "      <td>186</td>\n",
       "      <td>186</td>\n",
       "      <td>186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>91</td>\n",
       "      <td>91</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>94</td>\n",
       "      <td>95</td>\n",
       "      <td>129</td>\n",
       "      <td>177</td>\n",
       "      <td>177</td>\n",
       "      <td>177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>91</td>\n",
       "      <td>91</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>89</td>\n",
       "      <td>93</td>\n",
       "      <td>128</td>\n",
       "      <td>195</td>\n",
       "      <td>195</td>\n",
       "      <td>195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>91</td>\n",
       "      <td>91</td>\n",
       "      <td>350000.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>91</td>\n",
       "      <td>89</td>\n",
       "      <td>127</td>\n",
       "      <td>211</td>\n",
       "      <td>211</td>\n",
       "      <td>211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19234</th>\n",
       "      <td>47</td>\n",
       "      <td>52</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>53</td>\n",
       "      <td>37</td>\n",
       "      <td>30</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19235</th>\n",
       "      <td>47</td>\n",
       "      <td>59</td>\n",
       "      <td>500.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>49</td>\n",
       "      <td>47</td>\n",
       "      <td>31</td>\n",
       "      <td>49</td>\n",
       "      <td>49</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19236</th>\n",
       "      <td>47</td>\n",
       "      <td>55</td>\n",
       "      <td>500.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>46</td>\n",
       "      <td>36</td>\n",
       "      <td>31</td>\n",
       "      <td>49</td>\n",
       "      <td>49</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19237</th>\n",
       "      <td>47</td>\n",
       "      <td>60</td>\n",
       "      <td>500.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>48</td>\n",
       "      <td>47</td>\n",
       "      <td>32</td>\n",
       "      <td>35</td>\n",
       "      <td>35</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19238</th>\n",
       "      <td>47</td>\n",
       "      <td>60</td>\n",
       "      <td>500.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>54</td>\n",
       "      <td>36</td>\n",
       "      <td>32</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19239 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       overall  potential  wage_eur  passing  movement_reactions  \\\n",
       "0           93         93  320000.0     91.0                  94   \n",
       "1           92         92  270000.0     79.0                  93   \n",
       "2           91         91  270000.0     80.0                  94   \n",
       "3           91         91  270000.0     86.0                  89   \n",
       "4           91         91  350000.0     93.0                  91   \n",
       "...        ...        ...       ...      ...                 ...   \n",
       "19234       47         52    1000.0     46.0                  53   \n",
       "19235       47         59     500.0     50.0                  49   \n",
       "19236       47         55     500.0     45.0                  46   \n",
       "19237       47         60     500.0     36.0                  48   \n",
       "19238       47         60     500.0     45.0                  54   \n",
       "\n",
       "       mentality_composure   rf  lcm   cm  rcm  \n",
       "0                       96  131  210  210  210  \n",
       "1                       88  128  186  186  186  \n",
       "2                       95  129  177  177  177  \n",
       "3                       93  128  195  195  195  \n",
       "4                       89  127  211  211  211  \n",
       "...                    ...  ...  ...  ...  ...  \n",
       "19234                   37   30   48   48   48  \n",
       "19235                   47   31   49   49   49  \n",
       "19236                   36   31   49   49   49  \n",
       "19237                   47   32   35   35   35  \n",
       "19238                   36   32   48   48   48  \n",
       "\n",
       "[19239 rows x 10 columns]"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Concatenation of numerical values and encoded categorical values \n",
    "new_test_data = pd.concat([num_cols,fData], axis =1)\n",
    "new_test_data = new_test_data.fillna(df.mean())\n",
    "new_test_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "89542673-1ae0-4766-91f0-e79fa5da021d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>passing</th>\n",
       "      <th>movement_reactions</th>\n",
       "      <th>mentality_composure</th>\n",
       "      <th>rf</th>\n",
       "      <th>lcm</th>\n",
       "      <th>cm</th>\n",
       "      <th>rcm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>93</td>\n",
       "      <td>93</td>\n",
       "      <td>320000.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>94</td>\n",
       "      <td>96</td>\n",
       "      <td>131</td>\n",
       "      <td>210</td>\n",
       "      <td>210</td>\n",
       "      <td>210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>92</td>\n",
       "      <td>92</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>93</td>\n",
       "      <td>88</td>\n",
       "      <td>128</td>\n",
       "      <td>186</td>\n",
       "      <td>186</td>\n",
       "      <td>186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>91</td>\n",
       "      <td>91</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>94</td>\n",
       "      <td>95</td>\n",
       "      <td>129</td>\n",
       "      <td>177</td>\n",
       "      <td>177</td>\n",
       "      <td>177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>91</td>\n",
       "      <td>91</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>89</td>\n",
       "      <td>93</td>\n",
       "      <td>128</td>\n",
       "      <td>195</td>\n",
       "      <td>195</td>\n",
       "      <td>195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>91</td>\n",
       "      <td>91</td>\n",
       "      <td>350000.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>91</td>\n",
       "      <td>89</td>\n",
       "      <td>127</td>\n",
       "      <td>211</td>\n",
       "      <td>211</td>\n",
       "      <td>211</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   overall  potential  wage_eur  passing  movement_reactions  \\\n",
       "0       93         93  320000.0     91.0                  94   \n",
       "1       92         92  270000.0     79.0                  93   \n",
       "2       91         91  270000.0     80.0                  94   \n",
       "3       91         91  270000.0     86.0                  89   \n",
       "4       91         91  350000.0     93.0                  91   \n",
       "\n",
       "   mentality_composure   rf  lcm   cm  rcm  \n",
       "0                   96  131  210  210  210  \n",
       "1                   88  128  186  186  186  \n",
       "2                   95  129  177  177  177  \n",
       "3                   93  128  195  195  195  \n",
       "4                   89  127  211  211  211  "
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "281fb8e3-dcca-4fac-8e4d-b5df50f7dd8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "columns = ['overall', 'potential', 'wage_eur', 'passing', 'movement_reactions', 'mentality_composure','rf', 'lcm', 'cm', 'rcm']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "ffc93aae-ff6e-4cc9-813f-132f98117a9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 19239 entries, 0 to 19238\n",
      "Data columns (total 10 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   overall              19239 non-null  int64  \n",
      " 1   movement_reactions   19239 non-null  int64  \n",
      " 2   potential            19239 non-null  int64  \n",
      " 3   passing              19239 non-null  float64\n",
      " 4   wage_eur             19239 non-null  float64\n",
      " 5   cm                   19239 non-null  int32  \n",
      " 6   lcm                  19239 non-null  int32  \n",
      " 7   rcm                  19239 non-null  int32  \n",
      " 8   mentality_composure  19239 non-null  int64  \n",
      " 9   rf                   19239 non-null  int32  \n",
      "dtypes: float64(2), int32(4), int64(4)\n",
      "memory usage: 1.2 MB\n"
     ]
    }
   ],
   "source": [
    "new_test_data = new_test_data[columns]\n",
    "new_test_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "9853b1ea-575d-435b-8099-d4bff0e8c9ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting the dataset into dependent and independent variables\n",
    "\n",
    "Y_test = new_test_data['overall']\n",
    "\n",
    "X_test = new_test_data.drop(['overall'], axis=1)\n",
    "\n",
    "scalered_data = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "09a5954f-62e8-4fad-82f6-972cc25ae65c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 94.,  93.,  91., ..., 210.,  96., 131.],\n",
       "       [ 93.,  92.,  79., ..., 186.,  88., 128.],\n",
       "       [ 94.,  91.,  80., ..., 177.,  95., 129.],\n",
       "       ...,\n",
       "       [ 46.,  55.,  45., ...,  49.,  36.,  31.],\n",
       "       [ 48.,  60.,  36., ...,  35.,  47.,  32.],\n",
       "       [ 54.,  60.,  45., ...,  48.,  36.,  32.]])"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scalered_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3cafb509-cef7-43b9-9b0f-7aa71d2982ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_pred = best_rf_model.predict(scalered_data)\n",
    "test_rmse = np.sqrt(mean_squared_error(Y_test, Y_pred))\n",
    "print(f\"Test RMSE: {test_rmse:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "0523fe3e-80b6-49a5-bbc2-188f28990783",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 19239 entries, 0 to 19238\n",
      "Data columns (total 9 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   movement_reactions   19239 non-null  float64\n",
      " 1   potential            19239 non-null  float64\n",
      " 2   passing              19239 non-null  float64\n",
      " 3   wage_eur             19239 non-null  float64\n",
      " 4   cm                   19239 non-null  float64\n",
      " 5   lcm                  19239 non-null  float64\n",
      " 6   rcm                  19239 non-null  float64\n",
      " 7   mentality_composure  19239 non-null  float64\n",
      " 8   rf                   19239 non-null  float64\n",
      "dtypes: float64(9)\n",
      "memory usage: 1.3 MB\n"
     ]
    }
   ],
   "source": [
    "df_final = pd.DataFrame(scalered_data, columns =X_test.columns)\n",
    "df_final.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "0d1588e6-b511-4353-b16a-a4c5a99049bf",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\user\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:439: UserWarning: X does not have valid feature names, but RandomForestRegressor was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RandomForestRegressor RMSE: 28.961131627553065\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "randomF_y_pred = random_model.predict(scalered_data)\n",
    "randomF_rmse = mean_squared_error(Y_test, randomF_y_pred, squared=False)\n",
    "print(f\"RandomForestRegressor RMSE: {randomF_rmse}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "5002b211-e156-4dc2-8601-a0c4a7dc82ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\user\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:439: UserWarning: X does not have valid feature names, but GradientBoostingRegressor was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GradientBoostingRegressor RMSE: 29.07260342864976\n"
     ]
    }
   ],
   "source": [
    "grad_y_pred = gradient_model.predict(scalered_data)\n",
    "grad_rmse = mean_squared_error(Y_test, grad_y_pred, squared=False)\n",
    "print(f\"GradientBoostingRegressor RMSE: {grad_rmse}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "46d19442-a801-42ce-94c1-0de714e8a3a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Model: RandomForestRegressor\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Choose the best model based on RMSE\n",
    "best_model = random_model if randomF_rmse < grad_rmse else gradient_model\n",
    "print(f\"Best Model: {'RandomForestRegressor' if best_model == random_model else 'GradientBoostingRegressor'}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "359d2427-0e5a-4678-8786-8d7700470d6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Saving the model\n",
    "from joblib import dump\n",
    "import joblib\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "d07bf700-6c47-453a-836b-f2d6864142b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best model saved!\n"
     ]
    }
   ],
   "source": [
    "joblib.dump(best_model, 'best_model.pkl')\n",
    "print(\"Best model saved!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50bf384d-6cb1-4963-84ee-e058fe8acfcd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
